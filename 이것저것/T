import pandas as pd
import numpy as np
import sys
import seaborn
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import RobustScaler
import scipy.stats as stats
from keras.optimizers import Adam
# 데이터프레임 불러오기
# 데이터프레임 불러오기

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=42)

# Scaler 적용
scaler = StandardScaler()

X_train= scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

from keras.layers import Layer

class LayerNormalization(Layer):
    def __init__(self, epsilon=1e-6, **kwargs):
        super(LayerNormalization, self).__init__(**kwargs)
        self.epsilon = epsilon
    def build(self, input_shape):
        self.gamma = self.add_weight(name='gamma',
                                     shape=input_shape[-1:],
                                     initializer='ones',
                                     trainable=True)
        self.beta = self.add_weight(name='beta',
                                    shape=input_shape[-1:],
                                    initializer='zeros',
                                    trainable=True)
        super(LayerNormalization, self).build(input_shape)
    def call(self, inputs):
        mean, variance = tf.nn.moments(inputs, axes=-1, keep_dims=True)
        normalized = (inputs - mean) / tf.sqrt(variance + self.epsilon)
        return self.gamma * normalized + self.beta

class MultiHeadAttention(Layer):
    def __init__(self, embed_dim, num_heads):
        super(MultiHeadAttention, self).__init__()
        self.embed_dim = embed_dim
        self.num_heads = num_heads
        if embed_dim % num_heads != 0:
            raise ValueError(f"embedding dimension = {embed_dim} should be divisible by number of heads = {num_heads}")
        self.projection_dim = embed_dim // num_heads
        self.query_dense = Dense(embed_dim)
        self.key_dense = Dense(embed_dim)
        self.value_dense = Dense(embed_dim)
        self.combine_heads = Dense(embed_dim)
    def attention(self, query, key, value):
        score = tf.matmul(query, key, transpose_b=True)
        dim_key = tf.cast(tf.shape(key)[-1], tf.float32)
        scaled_score = score / tf.math.sqrt(dim_key)
        weights = tf.nn.softmax(scaled_score, axis=-1)
        output = tf.matmul(weights, value)
        return output
    def separate_heads(self, x, batch_size):
        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.projection_dim))
        return tf.transpose(x, perm=[0, 2, 1, 3])
    def call(self, inputs, key=None, value=None):
        if key is None:
            key = inputs
        if value is None:
            value = inputs
        batch_size = tf.shape(inputs)[0]
        query = self.query_dense(inputs)
        key = self.key_dense(key)
        value = self.value_dense(value)
        query = self.separate_heads(query, batch_size)
        key = self.separate_heads(key, batch_size)
        value = self.separate_heads(value, batch_size)
        attention = self.attention(query, key, value)
        attention = tf.transpose(attention, perm=[0, 2, 1, 3])
        concat_attention = tf.reshape(attention, (batch_size, -1, self.embed_dim))
        output = self.combine_heads(concat_attention)
        return output
# 트랜스포머 인코더 블록
class TransformerEncoderBlock(Layer):
    def __init__(self, embed_dim, num_heads, ff_dim, rate=0.1):
        super(TransformerEncoderBlock, self).__init__()
        self.att = MultiHeadAttention(embed_dim, num_heads)
        self.ffn = Sequential([  # Feed Forward Network
            Dense(ff_dim, activation="relu"),
            Dense(embed_dim),
        ])
        self.layernorm1 = LayerNormalization(epsilon=1e-6)
        self.layernorm2 = LayerNormalization(epsilon=1e-6)
        self.dropout1 = Dropout(rate)
        self.dropout2 = Dropout(rate)
    def call(self, inputs, training=True):
        attn_output = self.att(inputs)  # Self-attention
        attn_output = self.dropout1(attn_output, training=training)
        out1 = self.layernorm1(inputs + attn_output)
        ffn_output = self.ffn(out1)  # Feed Forward Network
        ffn_output = self.dropout2(ffn_output, training=training)
        return self.layernorm2(out1 + ffn_output)
class MaskedMultiHeadAttention(MultiHeadAttention):
    def __init__(self, embed_dim, num_heads):
        super(MaskedMultiHeadAttention, self).__init__(embed_dim, num_heads)
        
    def create_padding_mask(self, seq):
        seq_len = tf.shape(seq)[1]
        mask = tf.cast(tf.linalg.band_part(tf.ones((seq_len, seq_len)), -1, 0), tf.bool)
        return mask
    
    def call(self, inputs, key=None, value=None, mask=None):
        if key is None:
            key = inputs
        if value is None:
            value = inputs
        batch_size = tf.shape(inputs)[0]
        query = self.query_dense(inputs)
        key = self.key_dense(key)
        value = self.value_dense(value)
        query = self.separate_heads(query, batch_size)
        key = self.separate_heads(key, batch_size)
        value = self.separate_heads(value, batch_size)
        
        if mask is not None:
            mask = self.create_padding_mask(mask)
        attention = self.attention(query, key, value)
        attention = tf.transpose(attention, perm=[0, 2, 1, 3])
        concat_attention = tf.reshape(attention, (batch_size, -1, self.embed_dim))
        output = self.combine_heads(concat_attention)
        return output

class TransformerDecoderBlock(Layer):
    def __init__(self, embed_dim, num_heads, ff_dim, rate=0.1):
        super(TransformerDecoderBlock, self).__init__()
        self.att = MaskedMultiHeadAttention(embed_dim, num_heads)
        self.cross_att = MultiHeadAttention(embed_dim, num_heads)
        self.ffn = Sequential([
            Dense(ff_dim, activation="relu"),
            Dense(embed_dim),
        ])
        self.layernorm1 = LayerNormalization(epsilon=1e-6)
        self.layernorm2 = LayerNormalization(epsilon=1e-6)
        self.layernorm3 = LayerNormalization(epsilon=1e-6)
        self.dropout1 = Dropout(rate)
        self.dropout2 = Dropout(rate)
        self.dropout3 = Dropout(rate)
        
    def call(self, inputs, enc_output, mask=None, training=True):
        attn_output = self.att(inputs, mask=mask)
        attn_output = self.dropout1(attn_output, training=training)
        out1 = self.layernorm1(inputs + attn_output)
        cross_attn_output = self.cross_att(out1, key=enc_output, value=enc_output)
        cross_attn_output = self.dropout2(cross_attn_output, training=training)
        out2 = self.layernorm2(out1 + cross_attn_output)
        ffn_output = self.ffn(out2)
        ffn_output = self.dropout3(ffn_output, training=training)
        return self.layernorm3(out2 + ffn_output)
    

def build_transformer_model(time_steps, embed_dim, num_heads, ff_dim, num_encoder_blocks, num_decoder_blocks):
    # Encoder inputs
    inputs = Input(shape=(time_steps, embed_dim))
    # Stack multiple encoder blocks
    x = inputs
    for _ in range(num_encoder_blocks):
        enc_block = TransformerEncoderBlock(embed_dim, num_heads, ff_dim)
        x = enc_block(x)
    enc_output = x  # Encoder output
    # Decoder inputs
    decoder_inputs = Input(shape=(time_steps, embed_dim))
    x = decoder_inputs
    for _ in range(num_decoder_blocks):
        dec_block = TransformerDecoderBlock(embed_dim, num_heads, ff_dim)

        x = dec_block(x, enc_output=enc_output)  # 수정된 부분
    dec_output = x
    x = GlobalAveragePooling1D()(dec_output)
    # x = Dense(320, activation='relu')(x)
    # x = Dense(128, activation='relu')(x)
    x = Dense(64, activation='relu')(x)
    x = LayerNormalization()(x)
    x = Dense(32, activation='relu')(x)
    x = LayerNormalization()(x)
    x = Dense(16, activation='relu')(x)
    x = LayerNormalization()(x)
    outputs = Dense(1)(x)
    model = Model(inputs=[inputs, decoder_inputs], outputs=outputs)
    return model

from keras.layers import Input, Dense, Dropout, GlobalAveragePooling1D
from keras.models import Model,Sequential
import tensorflow as tf
from keras.optimizers import Adam
from keras.callbacks import EarlyStopping

# 데이터 차원 수정
X_train = np.expand_dims(X_train, axis=1)  # (N, time_steps, features)
X_test = np.expand_dims(X_test, axis=1)

# 디코더 입력 데이터 차원 수정
decoder_inputs_train = X_train  # 차원 일치
decoder_inputs_test = X_test  # 차원 일치

# 모델 빌드
embed_dim = X_train.shape[2]  # 입력 차원의 크기
time_steps = X_train.shape[1]  # 시퀀스 길이

# embed_dim = X_train.shape[1]  # 입력 차원의 크기
num_heads = 8  # 어텐션 헤드 수 (단일 헤드로 설정)
ff_dim = 64  # 피드포워드 네트워크 내부의 히든 레이어 크기
# time_steps = 1  # 시퀀스 길이
num_encoder_blocks = 8  # 인코더 블록의 개수
num_decoder_blocks = 8  # 디코더 블록의 개수
model = build_transformer_model(time_steps, embed_dim, num_heads, ff_dim, num_encoder_blocks, num_decoder_blocks)

# 모델 컴파일
# model.compile(loss='msle', optimizer=Adam(lr=0.0001), metrics=['mae', 'mse'])
model.compile(loss='msle', optimizer='adam', metrics=['mae', 'mse'])

# 콜백 설정
callbacks = [
    EarlyStopping(monitor='val_loss', patience=100, restore_best_weights=True),
]

# 모델 학습
r = model.fit([X_train, decoder_inputs_train], y_train, 
                    epochs=3000, batch_size=10000,  
                    validation_split=0.1, callbacks=callbacks)

# In[11]:


from sklearn import metrics

def print_evaluate(true, predicted, train=True):  
    mae = metrics.mean_absolute_error(true, predicted)
    mse = metrics.mean_squared_error(true, predicted)
    # rmse = np.sqrt(metrics.mean_squared_error(true, predicted))
    r2_square = metrics.r2_score(true, predicted)
    if train:
        print("========Training Result=======")
        print('MAE: ', mae)
        print('MSE: ', mse)
        # print('RMSE: ', rmse)
        print('R2 score: ', r2_square)
    elif not train:
        print("=========Testing Result=======")
        print('MAE: ', mae)
        print('MSE: ', mse)
        # print('RMSE: ', rmse)
        print('R2 score: ', r2_square)

# y_train_pred = model.predict(X_train)
# y_test_pred = model.predict(X_test)

# X1 predict
X1_reshaped = np.expand_dims(X1, axis=1)  # 2차원 데이터를 3차원으로 확장
X1_reshaped = X1_reshaped.reshape(X1_reshaped.shape[0], 1, 32)  # 2차원 데이터를 3차원으로 확장

y_train_pred = model.predict([X_train, decoder_inputs_train])
y_test_pred = model.predict([X_test, decoder_inputs_train])

# 예측 수행
y1_predict = model.predict([X1_reshaped,X1_reshaped])




print_evaluate(y_train, y_train_pred, train=True)
print_evaluate(y_test, y_test_pred, train=False)
print("================== result  측정데이터를 입력하여 검증================")
print_evaluate(y1, y1_predict, train=False)

# result_df['predict_result'] = y1_predict
# result_df.to_csv(r"C:\Users\User\Desktop\zero_base_model_60.csv")
print(abs(y1_predict))

#=========================================

# import matplotlib.pyplot as plt
#This function takes in the reference values and the prediction values as lists and returns a list with each index corresponding to the total number
#of points within that zone (0=A, 1=B, 2=C, 3=D, 4=E) and the plot
def clarke_error_grid(ref_values, pred_values, title_string):
    #Checking to see if the lengths of the reference and prediction arrays are the same
    assert (len(ref_values) == len(pred_values)), "Unequal number of values (reference : {}) (prediction : {}).". format(len(ref_values), len(pred_values))
    #Checks to see if the values are within the normal physiological range, otherwise it gives a warning
    if max(ref_values) > 400 or max(pred_values) > 400:
        print ("Input Warning: the maximum reference value {} or the maximum prediction value {} exceeds the normal physiological range of glucose (<400 mg/dl).".format(max(ref_values), max(pred_values)))
    if min(ref_values) < 0 or min(pred_values) < 0:
        print ("Input Warning: the minimum reference value {} or the minimum prediction value {} is less than 0 mg/dl.".format(min(ref_values),  min(pred_values)))
    #Clear plot
    plt.clf()
    #Set up plot
    plt.scatter(ref_values, pred_values, marker='o', color='black', s=8)
    plt.title(title_string + " Clarke Error Grid")
    plt.xlabel("Reference Concentration (mg/dl)")
    plt.ylabel("Prediction Concentration (mg/dl)")
    plt.xticks([0, 50, 100, 150, 200, 250, 300, 350, 400])
    plt.yticks([0, 50, 100, 150, 200, 250, 300, 350, 400])
    plt.gca().set_facecolor('white')
    #Set axes lengths
    plt.gca().set_xlim([0, 400])
    plt.gca().set_ylim([0, 400])
    plt.gca().set_aspect((400)/(400))
    #Plot zone lines
    plt.plot([0,400], [0,400], ':', c='black')                      #Theoretical 45 regression line
    plt.plot([0, 175/3], [70, 70], '-', c='black')
    #plt.plot([175/3, 320], [70, 400], '-', c='black')
    plt.plot([175/3, 400/1.2], [70, 400], '-', c='black')           #Replace 320 with 400/1.2 because 100*(400 - 400/1.2)/(400/1.2) =  20% error
    plt.plot([70, 70], [84, 400],'-', c='black')
    plt.plot([0, 70], [180, 180], '-', c='black')
    plt.plot([70, 290],[180, 400],'-', c='black')
    # plt.plot([70, 70], [0, 175/3], '-', c='black')
    plt.plot([70, 70], [0, 56], '-', c='black')                     #Replace 175.3 with 56 because 100*abs(56-70)/70) = 20% error
    # plt.plot([70, 400],[175/3, 320],'-', c='black')
    plt.plot([70, 400], [56, 320],'-', c='black')
    plt.plot([180, 180], [0, 70], '-', c='black')
    plt.plot([180, 400], [70, 70], '-', c='black')
    plt.plot([240, 240], [70, 180],'-', c='black')
    plt.plot([240, 400], [180, 180], '-', c='black')
    plt.plot([130, 180], [0, 70], '-', c='black')
    #Add zone titles
    plt.text(30, 15, "A", fontsize=15)
    plt.text(370, 260, "B", fontsize=15)
    plt.text(280, 370, "B", fontsize=15)
    plt.text(160, 370, "C", fontsize=15)
    plt.text(160, 15, "C", fontsize=15)
    plt.text(30, 140, "D", fontsize=15)
    plt.text(370, 120, "D", fontsize=15)
    plt.text(30, 370, "E", fontsize=15)
    plt.text(370, 15, "E", fontsize=15)

    #Statistics from the data
    zone = [0] * 5
    for i in range(len(ref_values)):
        if (ref_values[i] <= 70 and pred_values[i] <= 70) or (pred_values[i] <= 1.2*ref_values[i] and pred_values[i] >= 0.8*ref_values[i]):
            zone[0] += 1    #Zone A
        elif (ref_values[i] >= 180 and pred_values[i] <= 70) or (ref_values[i] <= 70 and pred_values[i] >= 180):
            zone[4] += 1    #Zone E
        elif ((ref_values[i] >= 70 and ref_values[i] <= 290) and pred_values[i] >= ref_values[i] + 110) or ((ref_values[i] >= 130 and ref_values[i] <= 180) and (pred_values[i] <= (7/5)*ref_values[i] - 182)):
            zone[2] += 1    #Zone C
        elif (ref_values[i] >= 240 and (pred_values[i] >= 70 and pred_values[i] <= 180)) or (ref_values[i] <= 175/3 and pred_values[i] <= 180 and pred_values[i] >= 70) or ((ref_values[i] >= 175/3 and ref_values[i] <= 70) and pred_values[i] >= (6/5)*ref_values[i]):
            zone[3] += 1    #Zone D
        else:
            zone[1] += 1    #Zone B
    return plt, zone

#=========================================

### def clarke_error_grid(ref_values, pred_values, title_string):
plt, zone = clarke_error_grid(y1, y1_predict, 'Blood Glucose')

print(zone)
plt.show()

